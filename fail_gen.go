package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Flob) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "x":
			{
				var zb0002 int8
				zb0002, err = dc.ReadInt8()
				if err != nil {
					err = msgp.WrapError(err, "X")
					return
				}
				z.X = Numberwang(zb0002)
			}
		case "y":
			z.Y, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Flob) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "x"
	err = en.Append(0x82, 0xa1, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt8(int8(z.X))
	if err != nil {
		err = msgp.WrapError(err, "X")
		return
	}
	// write "y"
	err = en.Append(0xa1, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.Y)
	if err != nil {
		err = msgp.WrapError(err, "Y")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Flob) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "x"
	o = append(o, 0x82, 0xa1, 0x78)
	o = msgp.AppendInt8(o, int8(z.X))
	// string "y"
	o = append(o, 0xa1, 0x79)
	o = msgp.AppendInt8(o, z.Y)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Flob) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "x":
			{
				var zb0002 int8
				zb0002, bts, err = msgp.ReadInt8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "X")
					return
				}
				z.X = Numberwang(zb0002)
			}
		case "y":
			z.Y, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Flob) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int8Size + 2 + msgp.Int8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Flobbity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = z.A.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "b":
			err = z.B.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Flobbity) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "a"
		err = en.Append(0xa1, 0x61)
		if err != nil {
			return
		}
		err = z.A.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "A")
			return
		}
		// write "b"
		err = en.Append(0xa1, 0x62)
		if err != nil {
			return
		}
		err = z.B.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "B")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Flobbity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "a"
		o = append(o, 0xa1, 0x61)
		o, err = z.A.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "A")
			return
		}
		// string "b"
		o = append(o, 0xa1, 0x62)
		o, err = z.B.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "B")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Flobbity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = z.A.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "b":
			bts, err = z.B.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Flobbity) Msgsize() (s int) {
	s = 1 + 2 + z.A.Msgsize() + 2 + z.B.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Flobs) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Flobs, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "x":
				{
					var zb0004 int8
					zb0004, err = dc.ReadInt8()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "X")
						return
					}
					(*z)[zb0001].X = Numberwang(zb0004)
				}
			case "y":
				(*z)[zb0001].Y, err = dc.ReadInt8()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Y")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Flobs) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0005 := range z {
		// map header, size 2
		// write "x"
		err = en.Append(0x82, 0xa1, 0x78)
		if err != nil {
			return
		}
		err = en.WriteInt8(int8(z[zb0005].X))
		if err != nil {
			err = msgp.WrapError(err, zb0005, "X")
			return
		}
		// write "y"
		err = en.Append(0xa1, 0x79)
		if err != nil {
			return
		}
		err = en.WriteInt8(z[zb0005].Y)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "Y")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Flobs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0005 := range z {
		// map header, size 2
		// string "x"
		o = append(o, 0x82, 0xa1, 0x78)
		o = msgp.AppendInt8(o, int8(z[zb0005].X))
		// string "y"
		o = append(o, 0xa1, 0x79)
		o = msgp.AppendInt8(o, z[zb0005].Y)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Flobs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Flobs, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "x":
				{
					var zb0004 int8
					zb0004, bts, err = msgp.ReadInt8Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "X")
						return
					}
					(*z)[zb0001].X = Numberwang(zb0004)
				}
			case "y":
				(*z)[zb0001].Y, bts, err = msgp.ReadInt8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Y")
					return
				}
			default:
				bts, err = msgp.Skip(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Flobs) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (len(z) * (5 + msgp.Int8Size + msgp.Int8Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Numberwang) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int8
		zb0001, err = dc.ReadInt8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Numberwang(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Numberwang) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt8(int8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Numberwang) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt8(o, int8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Numberwang) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int8
		zb0001, bts, err = msgp.ReadInt8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Numberwang(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Numberwang) Msgsize() (s int) {
	s = msgp.Int8Size
	return
}
